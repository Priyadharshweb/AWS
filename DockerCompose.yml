version: '3.8'

services:
  # React Frontend
  frontend:
    build: ./frontend  # Path to React frontend
    container_name: react-frontend
    ports:
      - "80:80"  # Expose React on port 80
    volumes:
      - ./frontend:/usr/src/app  # Mount local frontend code for live reloading
      - /usr/src/app/node_modules  # Mount node_modules inside the container to avoid conflicts
    networks:
      - app-network
    environment:
      - REACT_APP_API_URL=http://springboot-backend:8080  # Point React to the backend API

  # Spring Boot Backend
  backend:
    build: ./backend  # Path to Spring Boot backend
    container_name: springboot-backend
    ports:
      - "8080:8080"  # Expose Spring Boot on port 8080
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-db:3306/mydb
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=rootpassword
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    depends_on:
      - mysql-db  # Ensure MySQL is ready before Spring Boot starts
      - redis  # Ensure Redis is ready before Spring Boot starts
    volumes:
      - ./backend:/usr/src/app  # Mount backend code for live reloading
      - /usr/src/app/target  # Persist build artifacts for Spring Boot
    networks:
      - app-network

  # MySQL Database
  mysql-db:
    image: mysql:8
    container_name: mysql-db
    environment:
      - MYSQL_ROOT_PASSWORD=rootpassword
      - MYSQL_DATABASE=mydb  # Create 'mydb' database by default
    ports:
      - "3306:3306"  # Expose MySQL on port 3306
    volumes:
      - mysql-data:/var/lib/mysql  # Persist MySQL data
    networks:
      - app-network

  # Redis Caching Layer
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"  # Expose Redis on port 6379
    networks:
      - app-network

networks:
  app-network:
    driver: bridge  # Use a bridge network to allow containers to communicate

volumes:
  # Data Layer Volumes
  mysql-data:
    driver: local  # Persist MySQL data in a Docker volume
